package main;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import builders.CouplingGraphBuilder;
import clusters.HierarchicalClustering;
import clusters.ModuleIdentifier;

import graphs.CallGraph;
import graphs.CouplingCalculator;
import graphs.StaticCallGraph;
import processors.ASTProcessor;

public class StatisticsCollectorMain extends DefaultMain {
      private ASTProcessor processor; 
    private static final String PROJECTS_DIRECTORY = "../projectsJava";
    private static String TEST_PROJECT_PATH;

    @Override
    protected void menu() {
        System.out.println("\n1. Afficher le graphe d'appel.");
        System.out.println("2. Calculer le couplage entre classes.");
        System.out.println("3. generate graph pondére hvdskd.");
        System.out.println("4.cluster .");
    }

    public static void main(String[] args) {
        StatisticsCollectorMain main = new StatisticsCollectorMain();
        BufferedReader inputReader = new BufferedReader(new InputStreamReader(System.in));

        try {
            File projectDir = new File(PROJECTS_DIRECTORY);
            if (!projectDir.exists() || !projectDir.isDirectory()) {
                System.err.println("Erreur : Le répertoire des projets " + PROJECTS_DIRECTORY + " n'existe pas ou n'est pas un dossier valide.");
                return;
            }

            System.out.println("Projets disponibles :");
            listProjectsInDirectory(projectDir);
            System.out.println("Veuillez entrer le nom du projet que vous souhaitez analyser :");

            String projectName = inputReader.readLine();
            File selectedProject = new File(PROJECTS_DIRECTORY, projectName + "/src");

            while (!selectedProject.exists() || !selectedProject.isDirectory()) {
                System.err.println("Erreur : Le répertoire src du projet " + selectedProject.getPath() + " n'existe pas. Veuillez réessayer :");
                projectName = inputReader.readLine();
                selectedProject = new File(PROJECTS_DIRECTORY, projectName + "/src");
            }

            TEST_PROJECT_PATH = selectedProject.getCanonicalPath();
            String userInput = "";
            do {
                main.menu();
                userInput = inputReader.readLine();
                main.processUserInput(userInput, inputReader);
            } while (!userInput.equals("3"));

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    protected static void listProjectsInDirectory(File projectsDir) {
        File[] projects = projectsDir.listFiles(File::isDirectory);
        if (projects != null) {
            for (File project : projects) {
                System.out.println("- " + project.getName());
            }
        } else {
            System.err.println("Erreur : Impossible de lister les projets dans " + projectsDir.getPath());
        }
    }

    protected void processUserInput(String userInput, BufferedReader inputReader) {
         CallGraph callGraph = (CallGraph) processor; 
        try {
            switch (userInput) {
                case "1":
                System.out.println("Affichage du graphique d'appel pour le projet situé à " + TEST_PROJECT_PATH);
                try {
                    callGraph = StaticCallGraph.createCallGraph(TEST_PROJECT_PATH);
                } catch (IOException e) {
                    e.printStackTrace();
                }
                callGraph.log();
                case "2":
                try {
                    callGraph = StaticCallGraph.createCallGraph(TEST_PROJECT_PATH);
                } catch (IOException e) {
                    e.printStackTrace();
                }
                    System.out.println("Calcul du couplage entre classes pour le projet situé à " + TEST_PROJECT_PATH);
                    
                  

                    // Calculer le couplage entre les deux classes
                    CouplingCalculator calculator = new CouplingCalculator(TEST_PROJECT_PATH, callGraph);
                     // Récupération des indices de classes de l'utilisateur
                System.out.print("Entrez l'index de la première classe : ");
                int indexA = Integer.parseInt(inputReader.readLine());
                System.out.print("Entrez l'index de la deuxième classe : ");
                int indexB = Integer.parseInt(inputReader.readLine());

                // Calculer le couplage entre les deux classes
                double coupling = calculator.calculateCoupling(indexA, indexB);
                System.out.println("Couplage entre la classe " + indexA + " et la classe " + indexB + " : " + coupling);

                    break;

                case "3":
                try {
                    callGraph = StaticCallGraph.createCallGraph(TEST_PROJECT_PATH);
                } catch (IOException e) {
                    e.printStackTrace();
                }
                    System.out.println("Calcul du couplage entre classes pour le projet situé à " + TEST_PROJECT_PATH);
                   CouplingGraphBuilder builder = new CouplingGraphBuilder(callGraph, TEST_PROJECT_PATH);
                   builder.build();
        builder.printCouplingGraph();
                    break;
                    case "4":
                    try {
                        callGraph = StaticCallGraph.createCallGraph(TEST_PROJECT_PATH);
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    System.out.println("Clustering hiérarchique et identification des modules pour le projet situé à " + TEST_PROJECT_PATH);
                
                    double[][] couplingMatrix = callGraph.getCouplingMatrix(); // Obtenez la matrice de couplage
                    HierarchicalClustering hc = new HierarchicalClustering(couplingMatrix);
                    hc.cluster(5);
                    hc.generateDendrogramImage("dendrogram.jpeg");
                    break;
                
                    
                default:
                    System.err.println("Désolé, entrée incorrecte. Veuillez réessayer.");
                    break;
                

                
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
